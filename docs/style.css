/* TODO: (#407): Split the CSS.
 * NOTE: We have a CSS class usage analyzer that you can use to display the
 * current usage. As of today, you can invoke it by:
 *   ./pre-commit/docs_structure.py -c
 *
 * TODO: (#241): Document the class usage in the CSS. Add brief descriptions of
 * each rule, including what the rule does, and where the classes are used.
 */

/********** Home Page, and Generic **********/

h1,
h2,
h3,
h4,
h5,
h6,
strong {
  color: #2c3e50;
}

.collapse,
h4,
h5,
h6 {
  margin-top: 0;
  margin-bottom: 0;
}

h1 {
  text-align: center;
  font-size: 2rem;
  margin-bottom: 1.5rem;
}

figcaption {
  color: #7f8c8d;
  font-size: 0.9em;
}

a,
.link,
a strong,
a figcaption {
  color: #3498db;
  cursor: pointer;
  text-decoration: none;
}

.hover-link {
  color: inherit;
  cursor: inherit;
  text-decoration: inherit;
}

@media (hover: hover) {
  a:hover,
  .link:hover,
  .hover-link:hover,
  .collapse:hover {
    color: #3498db;
    cursor: pointer;
    text-decoration: underline;
  }
}

em {
  color: #7f8c8d;
}

figure {
  display: inline-block;
  margin: 0;
  text-align: center;
}

figure img {
  border: 2px solid #ddd;
  border-radius: 5px;
  box-shadow: 2px 2px 10px rgb(0 0 0 / 10%);
  margin: 0;
}

hr {
  border: 1px solid #ddd;
  margin: 20px 0;
}

body {
  line-height: 1.6;
  margin: 0 auto;
  max-width: 1000px;
  padding: 10px;
}

/* Although we strongly prefer Antinoou, it causes display jitter on AnkiDroid,
 * so we disable it. See
 * https://forums.ankiweb.net/t/card-layout-became-jumpy-after-adding-custom-font/42937.
 * It seems like a common problem that is not going to be resolved soon. */
body:not(.android .card),
input:not(.android .card) {
  font-family: Antinoou, sans-serif;
}

input[type='checkbox'] {
  accent-color: #3498db;
}

table {
  border-collapse: collapse;
  width: 100%;
}

@media (width <= 700px) {
  hr {
    margin: 10px 0;
  }

  body {
    font-size: 18px;
  }

  figure:not(.flashcards-screenshots) img:not(.logo) {
    height: auto;
    width: 100%;
  }
}

#logos {
  text-align: center;
}

#logos img,
.logo {
  height: 100px;
  margin-right: 10px;
}

.inline-logo {
  height: 20px;
}

/********** Crum's Notes **********/

/* TODO: (#241) Use classes that represent types, rather than desired behaviour.
*  Otherwise, this doesn't represent real decoupling of the style from the HTML.: */

.card {
  font-size: 18px;
}

.bordered {
  border: 1px solid black;
}

/* stylelint-disable selector-class-pattern */

.nightMode .bordered {
  border: 1px solid white;
}

/* stylelint-enable selector-class-pattern */

.explanatory-img {
  width: auto;
}

.crum-page-img-img,
.dawoud-page-img-img {
  width: 1000px;
}

.front {
  text-align: center;
}

.left {
  float: left;
}

.right {
  float: right;
}

.light {
  opacity: 0.7;
}

.heavy {
  opacity: 1;
}

.lighter {
  opacity: 0.7;
}

.very-light {
  opacity: 0.3;
}

.nag-hammadi {
  display: none;
  opacity: 0.65;
}

.wiki p {
  text-indent: 2em;
  margin-top: 0;
  margin-bottom: 0.5em;
}

.wiki p .droppable {
  font-size: small;

  /* In our Crum Wiki, we show .droppable tips inside <p> elements. This results in the
   * rule above indenting droppable content, which is undesirable. Ideally, a droppable
   * shouldn't live inside a <p> tag. Since this is a bit challenging to achieve,
   * we work around the problem by overriding the style for droppables. */
  text-indent: 0;
}

.wiki .bible {
  color: #1873cc; /* dark blue */
}

.wiki .reference {
  color: green;
}

.wiki .suffix {
  color: seagreen;
}

.type {
  color: gray;
}

.wiki .arabic,
.wiki .aramaic,
.wiki .hebrew,
.wiki .amharic {
  color: firebrick;
}

.wiki .headword {
  font-size: large;
}

/* siglum is the class of dialect siglum in Crum. */
.siglum {
  font-style: italic;
}

.dialect {
  color: #835f08; /* dark gold */
}

.wiki .coptic {
  font-weight: bold;
}

.wiki .bullet {
  font-weight: bold;
  color: indigo;
}

.sister-index {
  opacity: 0.5;
}

.index-index-list li::marker {
  color: rgb(0 0 0 / 50%);
}

.index-count {
  font-size: smaller;
  opacity: 0.5;
}

.part-of-speech {
  font-weight: bold;
}

/* In the derivations table, the part-of-speech needs to stand on a separate
 * line. This is not the case for the root's part-of-speech, which sits on the
 * same line as the categories, and hence retains a different display value.
 * In Lexicon, we retain the part-of-speech class for derivations in order to be
 * able to produce this behavior, but we don't retain the class for the root. */
.derivations,
body.lexicon {
  .part-of-speech {
    display: block;
  }
}

.categories {
  display: inline-block;
  float: right;
  opacity: 0.5;
}

.dev {
  display: none;
}

:target.verse,
:target.explanatory,
:target.sister,
:target.drv .marcion,
:target.drv .meaning {
  background-color: #ffa;
}

.drv-key {
  display: none;
}

.drv-link {
  font-size: x-small;
  font-style: italic;
  opacity: 0.7;
  float: right;
}

.header {
  vertical-align: center;
  align-items: center;
  justify-content: center;
  text-align: center;
  table-layout: fixed;
  width: 100%;
  position: relative;
  z-index: 10;
  background-color: rgb(255 255 255 / 90%);
}

.sister td:not(:first-child) {
  border-left: 1px solid black;
  padding-left: 5px;
  vertical-align: top;
}

body:not(.lexicon) .header td:not(:first-child) {
  border-left: 1px solid #ddd;
}

.small {
  font-size: small;
}

.italic {
  font-style: italic;
}

.sister:not(:last-child) {
  border-bottom: 1px solid black;
}

.sister-view {
  width: 10%;
}

.sister-title {
  width: 40%;
}

.sister-meaning {
  width: 50%;
}

/* stylelint-disable selector-class-pattern */

.sister-meaning .bibl,
.sister-meaning .ref_xr {
  display: none;
}

/* stylelint-enable selector-class-pattern */

.senses,
.quality {
  font-size: small;
  font-style: italic;
  color: #7f8c8d;
  display: none;
}

body.note .sense {
  padding-left: 10px;
}

.dev-mode-note,
.dialect-dictionaries {
  font-size: small;
  font-style: italic;
  color: #7f8c8d;
}

.border-dialect-letter {
  font-style: italic;
}

.dialect-code {
  width: 10%;
}

.dialect-name {
  width: 60%;
}

.abbreviations {
  float: left;
}

.button {
  padding: 2px 6px; /* Smaller padding for a more compact button */
  font-size: medium; /* Smaller text size */
  border-radius: 4px;
  cursor: pointer; /* Pointer cursor on hover */
  transition: all 0.3s ease-in-out; /* Smooth effects */
  background-color: #f0f0f0; /* Light gray */
  color: #3498db; /* Link blue */
  text-decoration: none; /* Remove underline in case it's an anchor. */
}

@media (hover: hover) {
  .button:hover {
    text-decoration: underline;
  }
}

.button:active {
  transform: scale(0.95); /* Slightly shrink */
}

.sisters-table {
  margin-left: 20px;
}

@media (width <= 500px) {
  .sisters-table {
    margin-left: 0;
  }
}

:root {
  --transition-duration: 0.5s;
}

.collapsible {
  display: grid;

  /* Start with the content row "squashed" to a height of 0. */
  grid-template-rows: 0fr;
  transition: grid-template-rows var(--transition-duration) ease-out;
}

/* grid-template-rows doesn't work on Firefox when the child of a `.collapsible`
 * element is complex. (It works fine on simpler elements.)
 * In our case, Lexicon collapsibles have `<table>` children,
 * and collapsing doesn't work properly on Firefox, so we resort to using
 * `max-height` property. We lose the animation though.
 * Animating the `max-height` property requires setting `max-height` to specific
 * values (e.g. if `max-height` is transitioning from `0px` to `100px`, then it
 * can be animated, but transitioning from `0px` to `none` can't).
 * The problem is that calculating the value for `max-height` can only be done
 * in JavaScript, which is very challenging to do correctly because the
 * `max-height` is very dynamic, and needs to be updated whenever:
 * - The `collapsible` element gains or loses content (which happens during
 *   Lexicon search)
 * - The user zooms in, in which case the content can get crammed, and the
 *   container ends up needing more height in order to accommodate it.
 * This all needs to be done while preventing race conditions, otherwise
 * `max-height` could be overwritten several times rapidly, in the wrong
 * order, and end up with an obsolete value.
 * We also prefer a pure CSS solution because it's simpler.
 * It seemed appropriate though to simply sacrifice the animation on Firefox.
 */
/* stylelint-disable at-rule-no-vendor-prefix */
@-moz-document url-prefix() {
  .collapsible:not(.is-open) {
    max-height: 0;
  }
}
/* stylelint-enable at-rule-no-vendor-prefix */

.collapsible.is-open {
  /* Expand the content row to its full, natural height. */
  grid-template-rows: 1fr;
}

/* The direct child must have overflow hidden to prevent content
   from spilling out during the animation. */
.collapsible,
.collapsible > * {
  overflow: hidden;
}

.arrow {
  display: inline-block; /* Allows transform to work */
  transition: transform var(--transition-duration) ease-in-out; /* Match your other transitions */
}

/* By default, it points right */
.arrow::before {
  content: 'â–¸ ';
}

/* When the parent has .is-open, rotate it and change the content */
.is-open .arrow {
  transform: rotate(90deg);
}

/********** KELLIA **********/

.orth {
  width: 50%;
}

.geo {
  color: darkred;
  width: 10%;
  text-align: center;
}

/* stylelint-disable selector-class-pattern */

.gram_grp {
  color: gray;
  font-style: italic;
}

/* stylelint-enable selector-class-pattern */

/* stylelint-disable no-descending-specificity */

.bibl {
  color: gray;
  width: 30%;
  text-align: right;
}

.ref {
  color: gray;
}

/* This rule applies to the meaning column in the senses table in KELLIA's
   * cards. Other files have a `meaning` class, but it shouldn't be impacted by
   * this rule. */
#senses .meaning {
  width: 70%;
}

/* stylelint-enable no-descending-specificity */

.xr {
  color: gray;
}

.lang {
  color: gray;
}

/********** Xooxle and Crum's help panel **********/

footer {
  text-align: center;
}

.overlay-background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgb(0 0 0 / 50%);
  z-index: 1;
  display: none;
}

.info-panel {
  top: 10%;
  left: 50%;
  transform: translateX(-50%);
  width: 80%;
  max-width: 600px;
  height: 80%;
  background-color: rgb(255 255 255 / 90%);
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 4px 10px rgb(0 0 0 / 20%);
  z-index: 2;
  text-align: center;
  display: none;
  position: fixed;
  overflow-y: auto;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: transparent;
  border: none;
  font-size: 20px;
  font-weight: bold;
  color: #333;
  cursor: pointer;
  transition: color 0.3s ease;
}

@media (hover: hover) {
  .close-btn:hover {
    color: #f00;
  }
}

.notes {
  font-size: small;
}

.disabled {
  display: none;
}

/*************** Fonts ***************/

@font-face {
  font-family: Antinoou;
  src: url('fonts/AntinoouFont-1.0.6/_Antinoou.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: Antinoou;
  src: url('fonts/AntinoouFont-1.0.6/_AntinoouItalic.woff2') format('woff2');
  font-weight: normal;
  font-style: italic;
}
