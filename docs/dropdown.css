/* CSS for both hover-invoked and click-invoked tooltips (a.k.a. droppables). */

/* .droppable represents either a click-invoked or hover-invoked tooltip. */
.droppable {
  /* The element is hidden by default. */
  display: none;

  /* The element shows right below the parent. */
  position: absolute;

  /* The tip has an opaque background to hind content behind it. */
  background-color: white;

  /* Add some shade to make it pretty. */
  box-shadow: 0 8px 16px rgb(0 0 0 / 20%);

  /* The element shows on top of other elements. */
  z-index: 1;

  /* Add some padding. */
  padding-left: 2px;
  padding-right: 2px;

  /* Align with the left edge of the sibling */
  left: 0;

  /* Try expanding without wrapping, up to 500px or 80% of the viewport width,
   * whichever is smaller. On large screens, that's the former. On small
   * screens, that's the latter. */
  width: max-content;
  max-width: min(500px, 80vw);

  /* Our parent elements don't wrap text on whitespace (see below). They can
   * afford that because they tend to be very short.
   * We must override this rule in order to allow (potentially long) tooltips to
   * wrap. */
  white-space: normal;
}

/* CSS for all parents of tooltips (hover-invoked or click-invoked). */
.drop,
.dropdown {
  /* Since tooltips render right beneath their parents, the positioning would
   * look rather odd in cases where the parent lives on multiple lines.
   * Thankfully, such parents tend to be so short that we can usually afford to
   * always display them on a single line and prevent wrapping on whitespace. */
  white-space: nowrap;

  /* Relative positioning is important to allow the child tooltip to render in
   * the correct position. */
  position: relative;
}

/* Hover-invoked .droppable: */
.dropdown .droppable {
  top: 100%; /* .droppable renders right beneath the previous sibling.
              It's unclear to me why this breaks click-invoked droppables.
              I would've otherwise included it in the shared ruleset. */
}

.dropdown:hover .droppable {
  /* Hovering a .dropdown element causes its child .droppable to show. */
  display: block;
}

/* .drop is specific to click-invoked elements. Clicking a .drop element should
 * toggle the display of its child tooltip. But this behavior is controlled in
 * JavaScript. */
.drop {
  cursor: pointer;
}
